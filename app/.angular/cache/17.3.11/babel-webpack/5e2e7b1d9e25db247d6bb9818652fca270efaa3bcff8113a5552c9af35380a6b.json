{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as TrackActions from '../../../core/store/track/track.actions';\nimport * as fromTrack from '../../../core/store/track/track.selectors';\nimport { formatTime } from '../../utils/format-time';\nlet PlayerComponent = class PlayerComponent {\n  constructor(store) {\n    this.store = store;\n    this.formatTime = formatTime;\n    this.currentTrack$ = this.store.select(fromTrack.selectCurrentTrack);\n    this.playbackState$ = this.store.select(fromTrack.selectPlaybackState);\n    this.hasPreviousTrack$ = this.store.select(fromTrack.selectHasPreviousTrack);\n    this.hasNextTrack$ = this.store.select(fromTrack.selectHasNextTrack);\n  }\n  togglePlayPause() {\n    this.store.select(fromTrack.selectCurrentTrack).subscribe(track => {\n      if (track) {\n        if (this.playbackState$) {\n          this.store.dispatch(TrackActions.pauseTrack());\n        } else {\n          this.store.dispatch(TrackActions.playTrack({\n            track\n          }));\n        }\n      }\n    }).unsubscribe();\n  }\n  onProgressClick(event) {\n    const element = event.currentTarget;\n    const rect = element.getBoundingClientRect();\n    const ratio = (event.clientX - rect.left) / rect.width;\n    this.playbackState$.subscribe(state => {\n      if (state.duration) {\n        this.store.dispatch(TrackActions.updateProgress({\n          currentTime: ratio * state.duration,\n          duration: state.duration\n        }));\n      }\n    }).unsubscribe();\n  }\n  onVolumeClick(event) {\n    const element = event.currentTarget;\n    const rect = element.getBoundingClientRect();\n    const ratio = (event.clientX - rect.left) / rect.width;\n    this.store.dispatch(TrackActions.setVolume({\n      volume: Math.max(0, Math.min(1, ratio))\n    }));\n  }\n  getProgress(current, total) {\n    return total ? current / total * 100 : 0;\n  }\n  previousTrack() {\n    this.store.dispatch(TrackActions.previousTrack());\n  }\n  nextTrack() {\n    this.store.dispatch(TrackActions.nextTrack());\n  }\n};\nPlayerComponent = __decorate([Component({\n  selector: 'app-player',\n  template: `\n    <div class=\"fixed bottom-0 w-full bg-surface border-t border-gray-700 p-4\">\n      <div class=\"container mx-auto flex items-center justify-between\">\n        <!-- Track Info -->\n        <div class=\"flex items-center space-x-4 w-1/4\">\n          <div class=\"w-14 h-14 bg-gray-700 rounded\">\n            <img \n              *ngIf=\"(currentTrack$ | async)?.coverImage\"\n              [src]=\"(currentTrack$ | async)?.coverImage\"\n              class=\"w-full h-full object-cover rounded\"\n              alt=\"Cover\"\n            >\n          </div>\n          <div class=\"truncate\">\n            <h4 class=\"font-medium truncate\">\n              {{ (currentTrack$ | async)?.title || 'No track selected' }}\n            </h4>\n            <p class=\"text-sm text-gray-400 truncate\">\n              {{ (currentTrack$ | async)?.artist || '' }}\n            </p>\n          </div>\n        </div>\n\n        <!-- Player Controls -->\n        <div class=\"flex flex-col items-center w-2/4\">\n          <div class=\"flex items-center space-x-6\">\n            <button \n              class=\"text-gray-400 hover:text-white\"\n              (click)=\"previousTrack()\"\n              [class.opacity-50]=\"!(hasPreviousTrack$ | async)\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <button \n              class=\"bg-white rounded-full p-2 hover:scale-105 transition-transform\"\n              (click)=\"togglePlayPause()\"\n              [class.opacity-50]=\"!(currentTrack$ | async)\"\n            >\n              <svg *ngIf=\"!(playbackState$ | async)?.isPlaying\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-black\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\" />\n              </svg>\n              <svg *ngIf=\"(playbackState$ | async)?.isPlaying\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-black\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 9v6m4-6v6\" />\n              </svg>\n            </button>\n            <button \n              class=\"text-gray-400 hover:text-white\"\n              (click)=\"nextTrack()\"\n              [class.opacity-50]=\"!(hasNextTrack$ | async)\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n              </svg>\n            </button>\n          </div>\n          \n          <!-- Progress Bar -->\n          <div class=\"w-full mt-2 flex items-center space-x-3\">\n            <span class=\"text-xs text-gray-400\">\n              {{ formatTime((playbackState$ | async)?.currentTime || 0) }}\n            </span>\n            <div \n              class=\"flex-1 h-2 bg-gray-700 rounded-full cursor-pointer relative group\"\n              (click)=\"onProgressClick($event)\"\n            >\n              <div \n                class=\"absolute inset-y-0 left-0 bg-primary rounded-full transition-all\"\n                [style.width.%]=\"getProgress((playbackState$ | async)?.currentTime || 0, (playbackState$ | async)?.duration || 0)\"\n              ></div>\n              <div class=\"absolute inset-y-0 w-3 h-3 bg-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\n                   [style.left.%]=\"getProgress((playbackState$ | async)?.currentTime || 0, (playbackState$ | async)?.duration || 0)\">\n              </div>\n            </div>\n            <span class=\"text-xs text-gray-400\">\n              {{ formatTime((playbackState$ | async)?.duration || 0) }}\n            </span>\n          </div>\n        </div>\n\n        <!-- Volume Control -->\n        <div class=\"flex items-center space-x-2 ml-4\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-gray-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <div class=\"flex items-center space-x-3 w-1/4 justify-end\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.536 8.464a5 5 0 010 7.072M12 6v12m0 0l3.75-3.75M12 18l-3.75-3.75M12 6L8.25 9.75M12 6l3.75 3.75\" />\n          </svg>\n          <div \n            class=\"w-24 h-1 bg-gray-700 rounded-full cursor-pointer\"\n            (click)=\"onVolumeClick($event)\"\n          >\n            <div \n              class=\"h-full bg-primary rounded-full\"\n              [style.width.%]=\"((playbackState$ | async)?.volume || 0) * 100\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n})], PlayerComponent);\nexport { PlayerComponent };","map":{"version":3,"names":["Component","TrackActions","fromTrack","formatTime","PlayerComponent","constructor","store","currentTrack$","select","selectCurrentTrack","playbackState$","selectPlaybackState","hasPreviousTrack$","selectHasPreviousTrack","hasNextTrack$","selectHasNextTrack","togglePlayPause","subscribe","track","dispatch","pauseTrack","playTrack","unsubscribe","onProgressClick","event","element","currentTarget","rect","getBoundingClientRect","ratio","clientX","left","width","state","duration","updateProgress","currentTime","onVolumeClick","setVolume","volume","Math","max","min","getProgress","current","total","previousTrack","nextTrack","__decorate","selector","template"],"sources":["/home/exshy/Documents/GitHub/Briefs/Angular/MusicStream/cursor_app/src/app/shared/components/player/player.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Track } from '../../../core/models/track.model';\nimport * as TrackActions from '../../../core/store/track/track.actions';\nimport * as fromTrack from '../../../core/store/track/track.selectors';\nimport { formatTime } from '../../utils/format-time';\n\n@Component({\n  selector: 'app-player',\n  template: `\n    <div class=\"fixed bottom-0 w-full bg-surface border-t border-gray-700 p-4\">\n      <div class=\"container mx-auto flex items-center justify-between\">\n        <!-- Track Info -->\n        <div class=\"flex items-center space-x-4 w-1/4\">\n          <div class=\"w-14 h-14 bg-gray-700 rounded\">\n            <img \n              *ngIf=\"(currentTrack$ | async)?.coverImage\"\n              [src]=\"(currentTrack$ | async)?.coverImage\"\n              class=\"w-full h-full object-cover rounded\"\n              alt=\"Cover\"\n            >\n          </div>\n          <div class=\"truncate\">\n            <h4 class=\"font-medium truncate\">\n              {{ (currentTrack$ | async)?.title || 'No track selected' }}\n            </h4>\n            <p class=\"text-sm text-gray-400 truncate\">\n              {{ (currentTrack$ | async)?.artist || '' }}\n            </p>\n          </div>\n        </div>\n\n        <!-- Player Controls -->\n        <div class=\"flex flex-col items-center w-2/4\">\n          <div class=\"flex items-center space-x-6\">\n            <button \n              class=\"text-gray-400 hover:text-white\"\n              (click)=\"previousTrack()\"\n              [class.opacity-50]=\"!(hasPreviousTrack$ | async)\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <button \n              class=\"bg-white rounded-full p-2 hover:scale-105 transition-transform\"\n              (click)=\"togglePlayPause()\"\n              [class.opacity-50]=\"!(currentTrack$ | async)\"\n            >\n              <svg *ngIf=\"!(playbackState$ | async)?.isPlaying\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-black\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\" />\n              </svg>\n              <svg *ngIf=\"(playbackState$ | async)?.isPlaying\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-8 w-8 text-black\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 9v6m4-6v6\" />\n              </svg>\n            </button>\n            <button \n              class=\"text-gray-400 hover:text-white\"\n              (click)=\"nextTrack()\"\n              [class.opacity-50]=\"!(hasNextTrack$ | async)\"\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5l7 7-7 7\" />\n              </svg>\n            </button>\n          </div>\n          \n          <!-- Progress Bar -->\n          <div class=\"w-full mt-2 flex items-center space-x-3\">\n            <span class=\"text-xs text-gray-400\">\n              {{ formatTime((playbackState$ | async)?.currentTime || 0) }}\n            </span>\n            <div \n              class=\"flex-1 h-2 bg-gray-700 rounded-full cursor-pointer relative group\"\n              (click)=\"onProgressClick($event)\"\n            >\n              <div \n                class=\"absolute inset-y-0 left-0 bg-primary rounded-full transition-all\"\n                [style.width.%]=\"getProgress((playbackState$ | async)?.currentTime || 0, (playbackState$ | async)?.duration || 0)\"\n              ></div>\n              <div class=\"absolute inset-y-0 w-3 h-3 bg-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\n                   [style.left.%]=\"getProgress((playbackState$ | async)?.currentTime || 0, (playbackState$ | async)?.duration || 0)\">\n              </div>\n            </div>\n            <span class=\"text-xs text-gray-400\">\n              {{ formatTime((playbackState$ | async)?.duration || 0) }}\n            </span>\n          </div>\n        </div>\n\n        <!-- Volume Control -->\n        <div class=\"flex items-center space-x-2 ml-4\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 text-gray-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <div class=\"flex items-center space-x-3 w-1/4 justify-end\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.536 8.464a5 5 0 010 7.072M12 6v12m0 0l3.75-3.75M12 18l-3.75-3.75M12 6L8.25 9.75M12 6l3.75 3.75\" />\n          </svg>\n          <div \n            class=\"w-24 h-1 bg-gray-700 rounded-full cursor-pointer\"\n            (click)=\"onVolumeClick($event)\"\n          >\n            <div \n              class=\"h-full bg-primary rounded-full\"\n              [style.width.%]=\"((playbackState$ | async)?.volume || 0) * 100\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class PlayerComponent {\n  currentTrack$: Observable<Track | null>;\n  playbackState$: Observable<{\n    isPlaying: boolean;\n    currentTime: number;\n    duration: number;\n    volume: number;\n  }>;\n  hasPreviousTrack$: Observable<boolean>;\n  hasNextTrack$: Observable<boolean>;\n\n  formatTime = formatTime;\n\n  constructor(private store: Store) {\n    this.currentTrack$ = this.store.select(fromTrack.selectCurrentTrack);\n    this.playbackState$ = this.store.select(fromTrack.selectPlaybackState);\n    this.hasPreviousTrack$ = this.store.select(fromTrack.selectHasPreviousTrack);\n    this.hasNextTrack$ = this.store.select(fromTrack.selectHasNextTrack);\n  }\n\n  togglePlayPause() {\n    this.store.select(fromTrack.selectCurrentTrack).subscribe(track => {\n      if (track) {\n        if (this.playbackState$) {\n          this.store.dispatch(TrackActions.pauseTrack());\n        } else {\n          this.store.dispatch(TrackActions.playTrack({ track }));\n        }\n      }\n    }).unsubscribe();\n  }\n\n  onProgressClick(event: MouseEvent) {\n    const element = event.currentTarget as HTMLElement;\n    const rect = element.getBoundingClientRect();\n    const ratio = (event.clientX - rect.left) / rect.width;\n    \n    this.playbackState$.subscribe(state => {\n      if (state.duration) {\n        this.store.dispatch(TrackActions.updateProgress({\n          currentTime: ratio * state.duration,\n          duration: state.duration\n        }));\n      }\n    }).unsubscribe();\n  }\n\n  onVolumeClick(event: MouseEvent) {\n    const element = event.currentTarget as HTMLElement;\n    const rect = element.getBoundingClientRect();\n    const ratio = (event.clientX - rect.left) / rect.width;\n    this.store.dispatch(TrackActions.setVolume({ volume: Math.max(0, Math.min(1, ratio)) }));\n  }\n\n  getProgress(current: number, total: number): number {\n    return total ? (current / total) * 100 : 0;\n  }\n\n  previousTrack() {\n    this.store.dispatch(TrackActions.previousTrack());\n  }\n\n  nextTrack() {\n    this.store.dispatch(TrackActions.nextTrack());\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}