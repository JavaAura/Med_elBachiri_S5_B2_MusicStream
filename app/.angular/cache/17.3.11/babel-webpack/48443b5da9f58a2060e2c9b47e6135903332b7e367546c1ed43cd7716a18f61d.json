{"ast":null,"code":"import _asyncToGenerator from \"/home/exshy/Documents/GitHub/Briefs/Angular/MusicStream/cursor_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport { db } from './db.service';\nimport * as i0 from \"@angular/core\";\nexport class TrackService {\n  constructor() {\n    this.tracksSubject = new BehaviorSubject([]);\n    this.tracks$ = this.tracksSubject.asObservable();\n    this.loadTracks();\n  }\n  loadTracks() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const tracks = yield db.tracks.toArray();\n        _this.tracksSubject.next(tracks);\n      } catch (error) {\n        console.error('Error loading tracks:', error);\n      }\n    })();\n  }\n  addTrack(trackData, audioFile) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const audioBlob = new Blob([audioFile], {\n          type: audioFile.type\n        });\n        // Create track entry\n        const track = {\n          ...trackData,\n          addedDate: new Date(),\n          duration: 0,\n          audioUrl: URL.createObjectURL(audioBlob)\n        };\n        // Save track metadata and ensure trackId is a number\n        const trackId = Number(yield db.tracks.add(track));\n        // Save audio file\n        yield db.audioFiles.add({\n          trackId: trackId,\n          blob: audioBlob\n        });\n        yield _this2.loadTracks();\n      } catch (error) {\n        console.error('Error adding track:', error);\n        throw error;\n      }\n    })();\n  }\n  deleteTrack(trackId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield db.tracks.delete(trackId);\n        yield db.audioFiles.where('trackId').equals(trackId).delete();\n        yield _this3.loadTracks();\n      } catch (error) {\n        console.error('Error deleting track:', error);\n        throw error;\n      }\n    })();\n  }\n  static {\n    this.ɵfac = function TrackService_Factory(t) {\n      return new (t || TrackService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TrackService,\n      factory: TrackService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","db","TrackService","constructor","tracksSubject","tracks$","asObservable","loadTracks","_this","_asyncToGenerator","tracks","toArray","next","error","console","addTrack","trackData","audioFile","_this2","audioBlob","Blob","type","track","addedDate","Date","duration","audioUrl","URL","createObjectURL","trackId","Number","add","audioFiles","blob","deleteTrack","_this3","delete","where","equals","factory","ɵfac","providedIn"],"sources":["/home/exshy/Documents/GitHub/Briefs/Angular/MusicStream/cursor_app/src/app/core/services/track.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { db } from './db.service';\nimport { Track } from '../models/track.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrackService {\n  private tracksSubject = new BehaviorSubject<Track[]>([]);\n  tracks$ = this.tracksSubject.asObservable();\n\n  constructor() {\n    this.loadTracks();\n  }\n\n  async loadTracks() {\n    try {\n      const tracks = await db.tracks.toArray();\n      this.tracksSubject.next(tracks);\n    } catch (error) {\n      console.error('Error loading tracks:', error);\n    }\n  }\n\n  async addTrack(trackData: Partial<Track>, audioFile: File): Promise<void> {\n    try {\n      const audioBlob = new Blob([audioFile], { type: audioFile.type });\n      \n      // Create track entry\n      const track: Track = {\n        ...trackData,\n        addedDate: new Date(),\n        duration: 0, // This should be calculated from the audio file\n        audioUrl: URL.createObjectURL(audioBlob)\n      } as Track;\n\n      // Save track metadata and ensure trackId is a number\n      const trackId = Number(await db.tracks.add(track));\n\n      // Save audio file\n      await db.audioFiles.add({\n        trackId: trackId,\n        blob: audioBlob\n      });\n\n      await this.loadTracks();\n    } catch (error) {\n      console.error('Error adding track:', error);\n      throw error;\n    }\n  }\n\n  async deleteTrack(trackId: number): Promise<void> {\n    try {\n      await db.tracks.delete(trackId);\n      await db.audioFiles.where('trackId').equals(trackId).delete();\n      await this.loadTracks();\n    } catch (error) {\n      console.error('Error deleting track:', error);\n      throw error;\n    }\n  }\n} "],"mappings":";AACA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,EAAE,QAAQ,cAAc;;AAMjC,OAAM,MAAOC,YAAY;EAIvBC,YAAA;IAHQ,KAAAC,aAAa,GAAG,IAAIJ,eAAe,CAAU,EAAE,CAAC;IACxD,KAAAK,OAAO,GAAG,IAAI,CAACD,aAAa,CAACE,YAAY,EAAE;IAGzC,IAAI,CAACC,UAAU,EAAE;EACnB;EAEMA,UAAUA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACd,IAAI;QACF,MAAMC,MAAM,SAAST,EAAE,CAACS,MAAM,CAACC,OAAO,EAAE;QACxCH,KAAI,CAACJ,aAAa,CAACQ,IAAI,CAACF,MAAM,CAAC;OAChC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;;IAC9C;EACH;EAEME,QAAQA,CAACC,SAAyB,EAAEC,SAAe;IAAA,IAAAC,MAAA;IAAA,OAAAT,iBAAA;MACvD,IAAI;QACF,MAAMU,SAAS,GAAG,IAAIC,IAAI,CAAC,CAACH,SAAS,CAAC,EAAE;UAAEI,IAAI,EAAEJ,SAAS,CAACI;QAAI,CAAE,CAAC;QAEjE;QACA,MAAMC,KAAK,GAAU;UACnB,GAAGN,SAAS;UACZO,SAAS,EAAE,IAAIC,IAAI,EAAE;UACrBC,QAAQ,EAAE,CAAC;UACXC,QAAQ,EAAEC,GAAG,CAACC,eAAe,CAACT,SAAS;SAC/B;QAEV;QACA,MAAMU,OAAO,GAAGC,MAAM,OAAO7B,EAAE,CAACS,MAAM,CAACqB,GAAG,CAACT,KAAK,CAAC,CAAC;QAElD;QACA,MAAMrB,EAAE,CAAC+B,UAAU,CAACD,GAAG,CAAC;UACtBF,OAAO,EAAEA,OAAO;UAChBI,IAAI,EAAEd;SACP,CAAC;QAEF,MAAMD,MAAI,CAACX,UAAU,EAAE;OACxB,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C,MAAMA,KAAK;;IACZ;EACH;EAEMqB,WAAWA,CAACL,OAAe;IAAA,IAAAM,MAAA;IAAA,OAAA1B,iBAAA;MAC/B,IAAI;QACF,MAAMR,EAAE,CAACS,MAAM,CAAC0B,MAAM,CAACP,OAAO,CAAC;QAC/B,MAAM5B,EAAE,CAAC+B,UAAU,CAACK,KAAK,CAAC,SAAS,CAAC,CAACC,MAAM,CAACT,OAAO,CAAC,CAACO,MAAM,EAAE;QAC7D,MAAMD,MAAI,CAAC5B,UAAU,EAAE;OACxB,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,MAAMA,KAAK;;IACZ;EACH;;;uBAtDWX,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAqC,OAAA,EAAZrC,YAAY,CAAAsC,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}