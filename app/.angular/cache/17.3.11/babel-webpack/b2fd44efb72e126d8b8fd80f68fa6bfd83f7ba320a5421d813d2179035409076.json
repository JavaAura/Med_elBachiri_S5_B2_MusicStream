{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\nimport * as TrackActions from './track.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../../services/track.service\";\nimport * as i3 from \"../../services/player.service\";\nexport class TrackEffects {\n  constructor(actions$, trackService, playerService) {\n    this.actions$ = actions$;\n    this.trackService = trackService;\n    this.playerService = playerService;\n    this.loadTracks$ = createEffect(() => this.actions$.pipe(ofType(TrackActions.loadTracks), mergeMap(() => this.trackService.loadTracks().pipe(map(tracks => TrackActions.loadTracksSuccess({\n      tracks\n    })), catchError(error => of(TrackActions.loadTracksFailure({\n      error\n    })))))));\n    this.addTrack$ = createEffect(() => this.actions$.pipe(ofType(TrackActions.addTrack), mergeMap(({\n      track,\n      audioFile\n    }) => this.trackService.addTrack(track, audioFile).pipe(map(newTrack => TrackActions.addTrackSuccess({\n      track: newTrack\n    })), catchError(error => of(TrackActions.addTrackFailure({\n      error\n    })))))));\n    this.playTrack$ = createEffect(() => this.actions$.pipe(ofType(TrackActions.playTrack), tap(({\n      track\n    }) => this.playerService.playTrack(track))), {\n      dispatch: false\n    });\n  }\n  static {\n    this.ɵfac = function TrackEffects_Factory(t) {\n      return new (t || TrackEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.TrackService), i0.ɵɵinject(i3.PlayerService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TrackEffects,\n      factory: TrackEffects.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["createEffect","ofType","of","map","mergeMap","catchError","tap","TrackActions","TrackEffects","constructor","actions$","trackService","playerService","loadTracks$","pipe","loadTracks","tracks","loadTracksSuccess","error","loadTracksFailure","addTrack$","addTrack","track","audioFile","newTrack","addTrackSuccess","addTrackFailure","playTrack$","playTrack","dispatch","i0","ɵɵinject","i1","Actions","i2","TrackService","i3","PlayerService","factory","ɵfac"],"sources":["/home/exshy/Documents/GitHub/Briefs/Angular/MusicStream/cursor_app/src/app/core/store/track/track.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\nimport * as TrackActions from './track.actions';\nimport { TrackService } from '../../services/track.service';\nimport { PlayerService } from '../../services/player.service';\n\n@Injectable()\nexport class TrackEffects {\n  loadTracks$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TrackActions.loadTracks),\n      mergeMap(() => this.trackService.loadTracks()\n        .pipe(\n          map(tracks => TrackActions.loadTracksSuccess({ tracks })),\n          catchError(error => of(TrackActions.loadTracksFailure({ error })))\n        ))\n    )\n  );\n\n  addTrack$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TrackActions.addTrack),\n      mergeMap(({ track, audioFile }) =>\n        this.trackService.addTrack(track, audioFile).pipe(\n          map(newTrack => TrackActions.addTrackSuccess({ track: newTrack })),\n          catchError(error => of(TrackActions.addTrackFailure({ error })))\n        )\n      )\n    )\n  );\n\n  playTrack$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TrackActions.playTrack),\n      tap(({ track }) => this.playerService.playTrack(track))\n    ),\n    { dispatch: false }\n  );\n\n  constructor(\n    private actions$: Actions,\n    private trackService: TrackService,\n    private playerService: PlayerService\n  ) {}\n} "],"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,GAAG,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAC/D,OAAO,KAAKC,YAAY,MAAM,iBAAiB;;;;;AAK/C,OAAM,MAAOC,YAAY;EAgCvBC,YACUC,QAAiB,EACjBC,YAA0B,EAC1BC,aAA4B;IAF5B,KAAAF,QAAQ,GAARA,QAAQ;IACR,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,aAAa,GAAbA,aAAa;IAlCvB,KAAAC,WAAW,GAAGb,YAAY,CAAC,MACzB,IAAI,CAACU,QAAQ,CAACI,IAAI,CAChBb,MAAM,CAACM,YAAY,CAACQ,UAAU,CAAC,EAC/BX,QAAQ,CAAC,MAAM,IAAI,CAACO,YAAY,CAACI,UAAU,EAAE,CAC1CD,IAAI,CACHX,GAAG,CAACa,MAAM,IAAIT,YAAY,CAACU,iBAAiB,CAAC;MAAED;IAAM,CAAE,CAAC,CAAC,EACzDX,UAAU,CAACa,KAAK,IAAIhB,EAAE,CAACK,YAAY,CAACY,iBAAiB,CAAC;MAAED;IAAK,CAAE,CAAC,CAAC,CAAC,CACnE,CAAC,CACL,CACF;IAED,KAAAE,SAAS,GAAGpB,YAAY,CAAC,MACvB,IAAI,CAACU,QAAQ,CAACI,IAAI,CAChBb,MAAM,CAACM,YAAY,CAACc,QAAQ,CAAC,EAC7BjB,QAAQ,CAAC,CAAC;MAAEkB,KAAK;MAAEC;IAAS,CAAE,KAC5B,IAAI,CAACZ,YAAY,CAACU,QAAQ,CAACC,KAAK,EAAEC,SAAS,CAAC,CAACT,IAAI,CAC/CX,GAAG,CAACqB,QAAQ,IAAIjB,YAAY,CAACkB,eAAe,CAAC;MAAEH,KAAK,EAAEE;IAAQ,CAAE,CAAC,CAAC,EAClEnB,UAAU,CAACa,KAAK,IAAIhB,EAAE,CAACK,YAAY,CAACmB,eAAe,CAAC;MAAER;IAAK,CAAE,CAAC,CAAC,CAAC,CACjE,CACF,CACF,CACF;IAED,KAAAS,UAAU,GAAG3B,YAAY,CAAC,MACxB,IAAI,CAACU,QAAQ,CAACI,IAAI,CAChBb,MAAM,CAACM,YAAY,CAACqB,SAAS,CAAC,EAC9BtB,GAAG,CAAC,CAAC;MAAEgB;IAAK,CAAE,KAAK,IAAI,CAACV,aAAa,CAACgB,SAAS,CAACN,KAAK,CAAC,CAAC,CACxD,EACD;MAAEO,QAAQ,EAAE;IAAK,CAAE,CACpB;EAME;;;uBApCQrB,YAAY,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,aAAA;IAAA;EAAA;;;aAAZ7B,YAAY;MAAA8B,OAAA,EAAZ9B,YAAY,CAAA+B;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}