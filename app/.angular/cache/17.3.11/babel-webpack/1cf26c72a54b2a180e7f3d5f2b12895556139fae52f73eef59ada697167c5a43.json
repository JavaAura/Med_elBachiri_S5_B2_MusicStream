{"ast":null,"code":"import _asyncToGenerator from \"/home/exshy/Documents/GitHub/Briefs/Angular/MusicStream/cursor_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { from } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { db } from './db.service';\nimport * as i0 from \"@angular/core\";\nexport class TrackService {\n  constructor() {}\n  addTrack(track, audioFile) {\n    return _asyncToGenerator(function* () {\n      try {\n        // Validate track data\n        if (!track.title) {\n          throw new Error('Track title is required');\n        }\n        if (!track.artist) {\n          throw new Error('Artist name is required');\n        }\n        if (!track.category) {\n          throw new Error('Category is required');\n        }\n        if (!audioFile) {\n          throw new Error('Audio file is required');\n        }\n        // Validate file type\n        if (!audioFile.type.startsWith('audio/')) {\n          throw new Error('Invalid file type. Please upload an audio file.');\n        }\n        // Add track to database\n        const newTrack = {\n          id: Date.now(),\n          title: track.title,\n          artist: track.artist,\n          category: track.category,\n          description: track.description || '',\n          coverImage: track.coverImage,\n          duration: audioFile.size,\n          addedDate: new Date(),\n          audioUrl: ''\n        };\n        const trackId = yield db.tracks.add(newTrack);\n        yield db.audioFiles.add({\n          trackId: trackId,\n          blob: audioFile\n        });\n        return {\n          ...newTrack,\n          id: trackId\n        };\n      } catch (error) {\n        console.error('Error in TrackService.addTrack:', error);\n        throw error;\n      }\n    })();\n  }\n  loadTracks() {\n    return from(db.tracks.toArray()).pipe(map(tracks => tracks), catchError(error => {\n      console.error('Error loading tracks:', error);\n      throw error;\n    }));\n  }\n  deleteTrack(trackId) {\n    return from(this.deleteTrackFromDb(trackId));\n  }\n  deleteTrackFromDb(trackId) {\n    return _asyncToGenerator(function* () {\n      yield db.tracks.delete(trackId);\n      yield db.audioFiles.where('trackId').equals(trackId).delete();\n    })();\n  }\n  static {\n    this.ɵfac = function TrackService_Factory(t) {\n      return new (t || TrackService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TrackService,\n      factory: TrackService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["from","map","catchError","db","TrackService","constructor","addTrack","track","audioFile","_asyncToGenerator","title","Error","artist","category","type","startsWith","newTrack","id","Date","now","description","coverImage","duration","size","addedDate","audioUrl","trackId","tracks","add","audioFiles","blob","error","console","loadTracks","toArray","pipe","deleteTrack","deleteTrackFromDb","delete","where","equals","factory","ɵfac","providedIn"],"sources":["/home/exshy/Documents/GitHub/Briefs/Angular/MusicStream/cursor_app/src/app/core/services/track.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { from, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { db } from './db.service';\nimport { Track } from '../models/track.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrackService {\n  constructor() {}\n\n  async addTrack(track: Partial<Track>, audioFile: File): Promise<Track> {\n    try {\n      // Validate track data\n      if (!track.title) {\n        throw new Error('Track title is required');\n      }\n      if (!track.artist) {\n        throw new Error('Artist name is required');\n      }\n      if (!track.category) {\n        throw new Error('Category is required');\n      }\n      if (!audioFile) {\n        throw new Error('Audio file is required');\n      }\n\n      // Validate file type\n      if (!audioFile.type.startsWith('audio/')) {\n        throw new Error('Invalid file type. Please upload an audio file.');\n      }\n\n      // Add track to database\n      const newTrack: Track = {\n        id: Date.now(),\n        title: track.title,\n        artist: track.artist,\n        category: track.category,\n        description: track.description || '',\n        coverImage: track.coverImage,\n        duration: audioFile.size,\n        addedDate: new Date(),\n        audioUrl: ''\n      };\n\n      const trackId = await db.tracks.add(newTrack);\n      await db.audioFiles.add({\n        trackId: trackId,\n        blob: audioFile\n      });\n\n      return { ...newTrack, id: trackId };\n    } catch (error) {\n      console.error('Error in TrackService.addTrack:', error);\n      throw error;\n    }\n  }\n\n  loadTracks(): Observable<Track[]> {\n    return from(db.tracks.toArray()).pipe(\n      map(tracks => tracks),\n      catchError(error => {\n        console.error('Error loading tracks:', error);\n        throw error;\n      })\n    );\n  }\n\n  deleteTrack(trackId: number): Observable<void> {\n    return from(this.deleteTrackFromDb(trackId));\n  }\n\n  private async deleteTrackFromDb(trackId: number): Promise<void> {\n    await db.tracks.delete(trackId);\n    await db.audioFiles.where('trackId').equals(trackId).delete();\n  }\n} "],"mappings":";AACA,SAASA,IAAI,QAAoB,MAAM;AACvC,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;AAChD,SAASC,EAAE,QAAQ,cAAc;;AAMjC,OAAM,MAAOC,YAAY;EACvBC,YAAA,GAAe;EAETC,QAAQA,CAACC,KAAqB,EAAEC,SAAe;IAAA,OAAAC,iBAAA;MACnD,IAAI;QACF;QACA,IAAI,CAACF,KAAK,CAACG,KAAK,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;;QAE5C,IAAI,CAACJ,KAAK,CAACK,MAAM,EAAE;UACjB,MAAM,IAAID,KAAK,CAAC,yBAAyB,CAAC;;QAE5C,IAAI,CAACJ,KAAK,CAACM,QAAQ,EAAE;UACnB,MAAM,IAAIF,KAAK,CAAC,sBAAsB,CAAC;;QAEzC,IAAI,CAACH,SAAS,EAAE;UACd,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;;QAG3C;QACA,IAAI,CAACH,SAAS,CAACM,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,EAAE;UACxC,MAAM,IAAIJ,KAAK,CAAC,iDAAiD,CAAC;;QAGpE;QACA,MAAMK,QAAQ,GAAU;UACtBC,EAAE,EAAEC,IAAI,CAACC,GAAG,EAAE;UACdT,KAAK,EAAEH,KAAK,CAACG,KAAK;UAClBE,MAAM,EAAEL,KAAK,CAACK,MAAM;UACpBC,QAAQ,EAAEN,KAAK,CAACM,QAAQ;UACxBO,WAAW,EAAEb,KAAK,CAACa,WAAW,IAAI,EAAE;UACpCC,UAAU,EAAEd,KAAK,CAACc,UAAU;UAC5BC,QAAQ,EAAEd,SAAS,CAACe,IAAI;UACxBC,SAAS,EAAE,IAAIN,IAAI,EAAE;UACrBO,QAAQ,EAAE;SACX;QAED,MAAMC,OAAO,SAASvB,EAAE,CAACwB,MAAM,CAACC,GAAG,CAACZ,QAAQ,CAAC;QAC7C,MAAMb,EAAE,CAAC0B,UAAU,CAACD,GAAG,CAAC;UACtBF,OAAO,EAAEA,OAAO;UAChBI,IAAI,EAAEtB;SACP,CAAC;QAEF,OAAO;UAAE,GAAGQ,QAAQ;UAAEC,EAAE,EAAES;QAAO,CAAE;OACpC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,MAAMA,KAAK;;IACZ;EACH;EAEAE,UAAUA,CAAA;IACR,OAAOjC,IAAI,CAACG,EAAE,CAACwB,MAAM,CAACO,OAAO,EAAE,CAAC,CAACC,IAAI,CACnClC,GAAG,CAAC0B,MAAM,IAAIA,MAAM,CAAC,EACrBzB,UAAU,CAAC6B,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAK,WAAWA,CAACV,OAAe;IACzB,OAAO1B,IAAI,CAAC,IAAI,CAACqC,iBAAiB,CAACX,OAAO,CAAC,CAAC;EAC9C;EAEcW,iBAAiBA,CAACX,OAAe;IAAA,OAAAjB,iBAAA;MAC7C,MAAMN,EAAE,CAACwB,MAAM,CAACW,MAAM,CAACZ,OAAO,CAAC;MAC/B,MAAMvB,EAAE,CAAC0B,UAAU,CAACU,KAAK,CAAC,SAAS,CAAC,CAACC,MAAM,CAACd,OAAO,CAAC,CAACY,MAAM,EAAE;IAAC;EAChE;;;uBAnEWlC,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAqC,OAAA,EAAZrC,YAAY,CAAAsC,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}